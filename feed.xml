<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml"/><link href="/" rel="alternate" type="text/html"/><updated>2025-02-15T08:18:04+00:00</updated><id>/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Signing AWS Requests with Curl</title><link href="/blog/2025/AWSSigning_Curl/" rel="alternate" type="text/html" title="Signing AWS Requests with Curl"/><published>2025-02-14T00:00:00+00:00</published><updated>2025-02-14T00:00:00+00:00</updated><id>/blog/2025/AWSSigning_Curl</id><content type="html" xml:base="/blog/2025/AWSSigning_Curl/"><![CDATA[<p>All requests to AWS APIs must be signed using <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">AWS Signature Version 4 (SigV4)</a>. While the <a href="https://aws.amazon.com/developer/">AWS SDK libraries</a> and the <a href="https://github.com/DavidMuller/aws-requests-auth">AWS CLI</a> will handle this for you, external HTTP client libraries are on their own to support the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv-create-signed-request.html">SigV4 signing process</a>.</p> <p>This matters if you have built an application using API Gateway and IAM authorization. Client requests, whether it be from a mobile application or testing script, need to be signed. Fortunately, the open-source community has contributed support for SigV4 in many popular HTTP libraries (e.g., <a href="https://github.com/DavidMuller/aws-requests-auth">Python’s Requests</a>, <a href="https://github.com/nicholasphair/aws_signature_v4_interceptor">Dart’s Dio</a>). Notably, the command line tool, <a href="https://github.com/curl/curl"><code class="language-plaintext highlighter-rouge">curl</code></a>, has native support for AWS signing.</p> <p>The curl incantation is tricky enough that I have to google and fuss about it a bit to get it right. Here are some common ways of signing your requests with curl.</p> <p>If you are still using long-term access keys this will do:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="se">\</span>
  <span class="nt">--request</span> POST <span class="se">\</span>
  <span class="nt">--user</span> <span class="s2">"</span><span class="nv">$AWS_ACCESS_KEY</span><span class="s2">:</span><span class="nv">$AWS_SECRET_ACCESS_KEY</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--aws-sigv4</span> <span class="s2">"aws:amz:us-east-1:execute-api"</span> <span class="se">\</span>
  <span class="nt">--header</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="s2">"</span><span class="nv">$URL</span><span class="s2">"</span>
</code></pre></div></div> <p>Of course, that approach is <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html">no longer recommended</a>, and you should use short-lived credentials. With short-lived credentials you’ll have to include session information with your temporary access and secret key.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="se">\</span>
  <span class="nt">--request</span> POST <span class="se">\</span>
  <span class="nt">--user</span> <span class="s2">"</span><span class="nv">$AWS_ACCESS_KEY</span><span class="s2">:</span><span class="nv">$AWS_SECRET_ACCESS_KEY</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--aws-sigv4</span> <span class="s2">"aws:amz:us-east-1:execute-api"</span> <span class="se">\</span>
  <span class="nt">--header</span> <span class="s2">"x-amz-security-token: </span><span class="nv">$AWS_SESSION_TOKEN</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--header</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="s2">"</span><span class="nv">$URL</span><span class="s2">"</span>
</code></pre></div></div> <p>Note, <code class="language-plaintext highlighter-rouge">AWS_ACCESS_KEY</code>, <code class="language-plaintext highlighter-rouge">AWS_SECRET_ACCESS_KEY</code>, and <code class="language-plaintext highlighter-rouge">AWS_SESSION_TOKEN</code> are probably not in your environment. You will need to set them.</p> <p>If you have programatic access (via the CLI) to the AWS account the API is in, and your permissions are sufficient, you can use the values in cached by the AWS CLI cache after a login.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-lt</span> ~/.aws/cli/cache
</code></pre></div></div> <p>You will likely want the most recent file there.</p> <p>Better still is to use the CLI itself to get at those values.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws configure export-credentials <span class="nt">--format</span> process
</code></pre></div></div> <p>You can parse the json output of that command and automate the steps needed to run your curl. Note, the aws CLI won’t respect the <code class="language-plaintext highlighter-rouge">--query</code> option for the <code class="language-plaintext highlighter-rouge">export-credentials</code> command - I presume to avoid piping sensitive data to external processes - so you will have to parse the output with a tool you trust. I use <code class="language-plaintext highlighter-rouge">jq</code> in the command below.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl 
 <span class="nt">--request</span> POST <span class="se">\</span>
 <span class="nt">--aws-sigv4</span> <span class="s2">"aws:amz:us-east-1:execute-api"</span> <span class="se">\</span>
 <span class="nt">--user</span> <span class="s2">"</span><span class="si">$(</span>aws configure export-credentials <span class="nt">--format</span> process | jq <span class="nt">-r</span> .AccessKeyId<span class="si">)</span><span class="s2">:</span><span class="si">$(</span>aws configure export-credentials <span class="nt">--format</span> process | jq <span class="nt">-r</span> .SecretAccessKey<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
 <span class="nt">--header</span> <span class="s2">"x-amz-security-token: </span><span class="si">$(</span>aws configure export-credentials <span class="nt">--format</span> process | jq <span class="nt">-r</span> .SessionToken<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
 <span class="nt">--header</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
 <span class="s2">"</span><span class="nv">$URL</span><span class="s2">"</span>
</code></pre></div></div> <p>And there you have it. Not the fastest but I think <a href="https://youtu.be/mGP-CvjqmXA?si=O21Tp14A-5iduuZm">it looks pretty good</a>.</p>]]></content><author><name></name></author><category term="AWS"/><category term="curl"/><summary type="html"><![CDATA[All requests to AWS APIs must be signed using AWS Signature Version 4 (SigV4). While the AWS SDK libraries and the AWS CLI will handle this for you, external HTTP client libraries are on their own to support the SigV4 signing process.]]></summary></entry><entry><title type="html">Some notes on endianness</title><link href="/blog/2022/Endianness/" rel="alternate" type="text/html" title="Some notes on endianness"/><published>2022-01-31T00:00:00+00:00</published><updated>2022-01-31T00:00:00+00:00</updated><id>/blog/2022/Endianness</id><content type="html" xml:base="/blog/2022/Endianness/"><![CDATA[<h1 id="endianness">Endianness</h1> <p>I recently found that my ideas of endianness were conflated with bit significance so I tried to straighten them out here.</p> <hr/> <p>Simply put, <a href="http://sites.fas.harvard.edu/~cscie287/spring2019/slides/Endianness.pdf">endianness is the order of bytes in a word</a>. The typical context is in computer memory.</p> <p>Now, accessing memory is not the only place where you have to reason about the order of bytes. Consider data you are reading off of the network or a wire. Just as in the case of memory, in order to make any sense of the sequence of bytes, you must establish the endianness of the data being consumed.</p> <table> <thead> <tr> <th style="text-align: center"><img src="/assets/img/real_term.png" alt="real_term"/></th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><b><a href="https://sourceforge.net/projects/realterm">RealTerm</a> Serial Program Endianness Setting</b></td> </tr> </tbody> </table> <p><br/><br/> You might care to know that different transmission protocols will define these things for you. For instance, the IP suite protocols all use a big-endian format (though they call it <a href="https://www.rfc-editor.org/rfc/rfc1700">network-byte order</a>).</p> <p>At this point you might be wondering if we can take this endianness idea one level deeper and apply it to the order of bits in a byte. The answer is yes, or at least, I see no reason it cannot be. If consuming bit-by-bit off of a wire we absolutely have to know the most significant bit to interpret the byte value. However, seldom are we working with single bits. Far more likely is that the byte is our atomic unit. For that reason you probably won’t hear much about bit-endianness.</p> <h2 id="bit-significance">Bit Significance</h2> <p>I want to make mention of something that tripped me up when interpreting bit-endianness.</p> <p>As mentioned above, one might point out that endianness is a bitwise problem too. For example, given the binary number, <code class="language-plaintext highlighter-rouge">0b110</code>, must we not establish which bit is significant to understand the value? The answer is of course we need to know the most significant bit but this is a different problem. Endianness is about interpreting a sequence or a stream of bytes. Here, is not a stream of bytes or collection of bits in the same context. What we have here is a single value. And the convention for interpreting values or establishing digit significance is the same in every numerical base; the most significant digit is first. For example:</p> <p>In binary:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0b110 = 1*2^2 + 1*2^1 + 0*2^0 = 4 + 2 + 0 = 6 (decimal)
</code></pre></div></div> <p>In octal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0o175 = 1*8^2 + 7*8^1 + 5*8^0 = 64 + 56 + 5 = 125 (decimal)
</code></pre></div></div> <p>In decimal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>345 = 3*10^2 + 4*10^1 + 5*10^0 = 300 + 40 + 5 = 345
</code></pre></div></div> <p>In hexadecimal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0xFE3 = F*16^2 + E*16^1 + 3*16^0 = 15*16^2 + 14*16^1 + 3*16^0 = 3840 + 224 + 3 = 4067 (decimal)
</code></pre></div></div> <p>It was tempting for me to reduce representations of a binary number to a sequence of bits, and indeed you could even almost square this with the definition, but context is everything. The sort-of mathematical or conventional representation of a number has nothing to do with memory or data transmission. As such, endiannesss does not apply.</p>]]></content><author><name></name></author><category term="endianness"/><category term="systems"/><category term="os"/><summary type="html"><![CDATA[Endianness I recently found that my ideas of endianness were conflated with bit significance so I tried to straighten them out here.]]></summary></entry><entry><title type="html">An emoji shortname extension for Sphinx</title><link href="/blog/2021/EmojiShortName/" rel="alternate" type="text/html" title="An emoji shortname extension for Sphinx"/><published>2021-07-18T00:00:00+00:00</published><updated>2021-07-18T00:00:00+00:00</updated><id>/blog/2021/EmojiShortName</id><content type="html" xml:base="/blog/2021/EmojiShortName/"><![CDATA[<p>I was building documentation at work the other day and found Sphinx was not rendering emojis like I had hoped. I tried out the <a href="https://github.com/sphinx-contrib/emojicodes">emojicode</a> extension but was limited by its <a href="https://github.com/sphinx-contrib/emojicodes/blob/v0.1.8/sphinxemoji/sphinxemoji.py#L20">lack of support for Markdown</a> and its <a href="https://github.com/sphinx-contrib/emojicodes/blob/v0.1.8/README.rst#usage">bar syntax</a>.</p> <p>So, I wrote a new extension to work with both <code class="language-plaintext highlighter-rouge">Markdown</code> and <code class="language-plaintext highlighter-rouge">reStructuredText</code>. The extension uses the familiar shortname sandwiched between colons syntax.</p> <p>You can fetch the <code class="language-plaintext highlighter-rouge">emoji-shortname</code> package from <a href="https://pypi.org/project/emoji-shortname/#description">PyPI</a> or view the source on <a href="https://github.com/nicholasphair/emoji-shortname">GitHub</a>.</p> <hr/> <p>Truthfully, this project was more of an exercise in Python tooling than anything else. I learned a lot about packaging projects and the various PEPs that relate to the task. I trust this experience will help me launch more packages in the future.</p> <style>img{width:100%;height:auto}</style>]]></content><author><name></name></author><category term="sphinx"/><category term="python"/><summary type="html"><![CDATA[I was building documentation at work the other day and found Sphinx was not rendering emojis like I had hoped. I tried out the emojicode extension but was limited by its lack of support for Markdown and its bar syntax.]]></summary></entry><entry><title type="html">Some thoughts on horizontal spacing</title><link href="/blog/2021/HorizontalSpacing/" rel="alternate" type="text/html" title="Some thoughts on horizontal spacing"/><published>2021-06-16T00:00:00+00:00</published><updated>2021-06-16T00:00:00+00:00</updated><id>/blog/2021/HorizontalSpacing</id><content type="html" xml:base="/blog/2021/HorizontalSpacing/"><![CDATA[<p>One of the open-source projects I work on has a strong preference for horizontal spacing. Config files are written to have nicely aligned columns.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fields = [
  { name = "event_id"       , type = "String" , index = false             }
  { name = "dtg"            , type = "Date"   , index = false             }
  { name = "geom"           , type = "Point"  , index = true, srid = 4326 }
  { name = "attacktype"     , type = "String" , index = false             }
  { name = "target"         , type = "String" , index = false             }
  { name = "perpgroup"      , type = "String" , index = false             }
  { name = "weapontype"     , type = "String" , index = false             }
  { name = "killed"         , type = "Integer", index = false             }
  { name = "injured"        , type = "Integer", index = false             }
  { name = "propertydamage" , type = "Double" , index = false             }
]
</code></pre></div></div> <p>Much has been written about the flaws of this style (See Uncle Bob’s <a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/">Clean Code</a>) and in my experience developers acknowledge that files formatted in this way are a pain to maintain. So, why do we still see it? The overwhelming reason I have been given is that, “they are just so readable”. And that is the point I want to counter. My contention is that this formatting helps <em>lookability</em>, but does nothing for readability.</p> <p>In English you read left-to-right. The consequence of horizontal padding is columns that catch your eye and leave you reading up and down, scanning a document in an unnatural way. Perhaps you can get past this. In that case, is there something to be gained by reading column-wise? Unfortunately, not. To see what I mean, transpose the array above and read it left-to-right. The result of this exercise is the same as reading column-wise.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name = "event_id", name = "dtg", name = "geom", name = "attacktype", ...
type = "String", type = "Date", type = "Point", type = "String", ...
index = false, index = false, index = true, index = false, ...
</code></pre></div></div> <p>These lines are meaningless. Keeping, for instance, a list of types in your head does nothing for your understanding of the file.</p> <p>Instead, prefer groupings that are natural and enhance your understanding of the file. With that comes readability.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fields = [
  {
    name = "event_id",
    type = "String",
    index = false
  }
  {
    name = "dtg", 
    type = "Date",
    index = false
  }
  { name = "geom",
    type = "Point",
    index = true,
    srid = 4326 
  }
  {
    name = "attacktype", 
    type = "String",
    index = false
  }
  {
    name = "target", 
    type = "String",
    index = false
  }
  {
    name = "perpgroup", 
    type = "String",
    index = false
  }
  {
    name = "weapontype", 
    type = "String",
    index = false
  }
  {
    name = "killed", 
    type = "Integer",
    ndex = false
  }
  {
    name = "injured", 
    type = "Integer",
    ndex = false
  }
  {
    name = "propertydamage", 
    type = "Double",
    index = false
  }
]
</code></pre></div></div>]]></content><author><name></name></author><category term="horizontal padding"/><category term="clean code"/><summary type="html"><![CDATA[One of the open-source projects I work on has a strong preference for horizontal spacing. Config files are written to have nicely aligned columns.]]></summary></entry><entry><title type="html">A quick Firefox theme for UVA</title><link href="/blog/2021/UVAFirefoxTheme/" rel="alternate" type="text/html" title="A quick Firefox theme for UVA"/><published>2021-06-09T00:00:00+00:00</published><updated>2021-06-09T00:00:00+00:00</updated><id>/blog/2021/UVAFirefoxTheme</id><content type="html" xml:base="/blog/2021/UVAFirefoxTheme/"><![CDATA[<p>Using the <a href="https://color.firefox.com/">Firefox Color</a> add-on I created a UVA flavored theme.</p> <p>The theme adheres to the <a href="https://brand.virginia.edu/brand-essentials/colors/web-palette">University’s color palette</a> and you can see a screenshot of it below.</p> <p><img src="/assets/img/uva_firefox_theme/uva_firefox_theme_screenshot.png" alt=""/></p> <p><a href="https://color.firefox.com/?theme=XQAAAAIMAQAAAAAAAABBKYhm849SCia2CaaEGccwS-xMDPr0sKyH_GaE8OEjswAFlQ3E_J4njPx8-YvEVPdeZdpZIE2dFtqp41LXDrvYyInXwas9SX9WsSnxi0IEWZOfXgQmqua5Pi8LhuRbv69TPH3-XAuTDhtSvp47CL8J85WuDmcdvFKSALpgwQmzD4aKopJEDQ6MZnt2j21zCx3aFBwXoslVqncH__BR6OA">Here</a> is a shareable link. Feel free to use and modify as you please.</p> <style>img{width:100%;height:auto}</style>]]></content><author><name></name></author><category term="firefox"/><summary type="html"><![CDATA[Using the Firefox Color add-on I created a UVA flavored theme.]]></summary></entry><entry><title type="html">Joining the Dark Side</title><link href="/blog/2021/StartingAPhD/" rel="alternate" type="text/html" title="Joining the Dark Side"/><published>2021-03-05T00:00:00+00:00</published><updated>2021-03-05T00:00:00+00:00</updated><id>/blog/2021/StartingAPhD</id><content type="html" xml:base="/blog/2021/StartingAPhD/"><![CDATA[<p>I am thrilled to announce that I will be starting a PhD in Computer Science in the Fall! </p> <p>To my Hokie friends, forgive me, I am becoming a Wahoo. The opportunity to work with the faculty at UVa was far too great to pass up. While my 3 years as a Software Engineer at CCRi will be coming to an end, I am beyond excited for this next chapter.</p> <p>I suppose I’ll have to change this site’s color scheme.</p> <p>Wish me luck!</p>]]></content><author><name></name></author><category term="PhD"/><category term="CS"/><category term="UVa"/><summary type="html"><![CDATA[I am thrilled to announce that I will be starting a PhD in Computer Science in the Fall!]]></summary></entry><entry><title type="html">An attempt at cable management</title><link href="/blog/2021/TVCableManagement/" rel="alternate" type="text/html" title="An attempt at cable management"/><published>2021-02-26T00:00:00+00:00</published><updated>2021-02-26T00:00:00+00:00</updated><id>/blog/2021/TVCableManagement</id><content type="html" xml:base="/blog/2021/TVCableManagement/"><![CDATA[<p>I finally got around to cleaning up my wires. </p> <p>There is something so satisfying about a tidy assortment of wires. Conversely, nothing is more nauseating than than a messy web of wires. Bearing these feelings in mind, it was time to to tackle this embarrassment.</p> <p><img src="/assets/img/wire_cleanup/wires_pre_cleanup.jpg" alt=""/></p> <p>Armed with inspiration from <a href="https://www.reddit.com/r/cableporn/comments/7kfv3m/the_back_of_my_tv_all_sorted_out_and_no_wires/?utm_source=share&amp;utm_medium=web2x&amp;context=3">reddit</a>, I wrangled a disaster into a work of art attached to the back of our TV.</p> <p><img src="/assets/img/wire_cleanup/wires_post_cleanup.jpg" alt=""/> <img src="/assets/img/wire_cleanup/tv_post_cleanup.jpg" alt=""/></p> <p>Okay, maybe not a work of art but, I am proud of it.</p> <p>A few details to share. First, I went with pegboard because I thought it would make attaching my devices easier. While that was sometimes true, often the mounting holes on the device did not line up with a hole one the board. I am really not too sure why I thought they would. I found myself drilling new holes into the board to get spacing right. Nevertheless, if I was to do this again I would stick with the pegboard. The reason is to maximize airflow. Second, I used tiny plastic M5 bolts to connect the devices. I bought <a href="https://www.amazon.com/gp/product/B07Q3W65FV/ref=ppx_yo_dt_b_asin_title_o07_s00?ie=UTF8&amp;psc=1">this kit</a> on Amazon and had plenty to mount my devices. Third, for devices without mounting holes (eg. the gateway and xbox) I used Velcro. Fourth, all of my wires are held together by Velcro. I prefer Velcro to zip-ties because Velcro better tolerates moving and removing. Lastly, I made three service loops. The largest is the power and coax loop. Then there is a loop for CAT5 cables, and a loop for HDMI cables. I wanted these loops separate from the power as I suspect that they are the least likely to stay fixed.</p> <p>Thanks for reading!</p> <style>img{width:100%;height:auto}</style>]]></content><author><name></name></author><category term="cable managment"/><summary type="html"><![CDATA[I finally got around to cleaning up my wires.]]></summary></entry><entry><title type="html">pretty-aws-navbar v2.0.0</title><link href="/blog/2020/pretty-aws-navbar-v2/" rel="alternate" type="text/html" title="pretty-aws-navbar v2.0.0"/><published>2020-10-27T00:00:00+00:00</published><updated>2020-10-27T00:00:00+00:00</updated><id>/blog/2020/pretty-aws-navbar-v2</id><content type="html" xml:base="/blog/2020/pretty-aws-navbar-v2/"><![CDATA[<p>Version 2 of pretty-aws-navbar released. </p> <p>Recently, Amazon gave a facelift to the navigation bar of the AWS console. In response to this, I have released a new version of <a href="https://github.com/nicholasphair/pretty-aws-navbar">pretty-aws-navbar</a>. On top of fixing the broken CSS, version 2 extends the prettification to color the header, footer, dropdowns, search bar, and hover effects. Further, version 2 now parses the html to find the region code rather than rely on a hard-coded map.</p> <p>Deploy <code class="language-plaintext highlighter-rouge">pretty-aws-navbar</code> with a userscript manager like <a href="https://www.greasespot.net/">greasemonkey</a> today!</p>]]></content><author><name></name></author><category term="aws"/><summary type="html"><![CDATA[Version 2 of pretty-aws-navbar released.]]></summary></entry><entry><title type="html">pretty-aws-navbar</title><link href="/blog/2020/pretty-aws-navbar/" rel="alternate" type="text/html" title="pretty-aws-navbar"/><published>2020-01-22T00:00:00+00:00</published><updated>2020-01-22T00:00:00+00:00</updated><id>/blog/2020/pretty-aws-navbar</id><content type="html" xml:base="/blog/2020/pretty-aws-navbar/"><![CDATA[<p>Prettify the AWS Console’s Navigation Bar. </p> <p>The other day I came across <a href="https://www.charon.org/extension.html">AWS console regions color</a>. A Chrome/FireFox extension that colors the top navigation bar based on the region you are in. The extension also adds the region code and appropriate country flag to the navigation bar. Cool, good work author!</p> <p>Now, I like the idea of having a more informative navigation bar but, my AWS interactions all tend to be in the same region. I would not get any lift from this plugin. What’s more, the source for the extension is not publicly available - at least not at the time of writing. This prevents me from tweaking the plugin for my usecase. Further, it denies me an opportunity to skim through the codebase and make sure nothing fishy is happening. Now, this is in no way an accusation, just a motivation to go and write my own flavor of the plugin. And that is what I did.</p> <p><a href="https://github.com/nicholasphair/pretty-aws-navbar">pretty-aws-navbar</a> is less than 100 lines of <code class="language-plaintext highlighter-rouge">js</code> that will color the AWS console’s navigation bar and conveniently display the appropriate region code next to the region name. I deploy the script with <a href="https://www.greasespot.net/">greasemonkey</a> but imagine any userscript manager will do the trick. Feel free to inspect, use, and tweak the code however you see fit!</p>]]></content><author><name></name></author><category term="aws"/><summary type="html"><![CDATA[Prettify the AWS Console’s Navigation Bar.]]></summary></entry><entry><title type="html">vim visual mode learnings</title><link href="/blog/2019/VimVisualO/" rel="alternate" type="text/html" title="vim visual mode learnings"/><published>2019-12-23T00:00:00+00:00</published><updated>2019-12-23T00:00:00+00:00</updated><id>/blog/2019/VimVisualO</id><content type="html" xml:base="/blog/2019/VimVisualO/"><![CDATA[<p>There is always something new to learn in VIM. That is part of the fun. Today, I share two features I recently discovered. </p> <p>First, <code class="language-plaintext highlighter-rouge">o</code> in visual mode.</p> <p>To motivate this move, imagine a situation that I sometimes find myself in. I have just written a block of code and decide that its current spot is no good. Perhaps, I want to extract it into its own method. So I hop into visual mode, hit <code class="language-plaintext highlighter-rouge">j</code> a few times, and just before I smack that <code class="language-plaintext highlighter-rouge">d</code> key I realize I started one line too late. Ugh. I hit escape, move to the correct starting point this time, and repeat. As it turns out, I didn’t have to totally scrap my visual selection to grab the line I wanted. When you have a block of text selected you can press the <code class="language-plaintext highlighter-rouge">o</code> key to toggle between the top and bottom of the selection. This works in visual block mode as well.</p> <p><img src="/assets/gif/12-23-19_blog_vim_visual_o.gif" alt=""/></p> <p>The other tidbit I have to share with you comes from the grab bag of commands in VIM’s g family. The command is <code class="language-plaintext highlighter-rouge">gv</code>. From the vimdocs:</p> <pre style="color:#000000;background:#ffffff;">gv                      Start Visual mode with the same area 
                        as the previous area and the same 
                        mode<span style="color:#808030; ">.</span>
                        In Visual mode the current and the 
                        previous Visual area are exchanged<span style="color:#808030; ">.</span>
                        After using <span style="color:#800000; ">"</span><span style="color:#0000e6; ">p</span><span style="color:#800000; ">"</span> or <span style="color:#800000; ">"</span><span style="color:#0000e6; ">P</span><span style="color:#800000; ">"</span> in Visual mode
                        the text that was put will be 
                        selected<span style="color:#808030; ">.</span>
</pre> <p>Put succinctly, press <code class="language-plaintext highlighter-rouge">gv</code> to reselect your last visual selection.</p> <p><img src="/assets/gif/12-23-19_blog_vim_gv.gif" alt=""/></p> <p>Happy VIMing!</p> <style>img{width:100%;height:auto}</style>]]></content><author><name></name></author><category term="vim"/><summary type="html"><![CDATA[There is always something new to learn in VIM. That is part of the fun. Today, I share two features I recently discovered.]]></summary></entry></feed>